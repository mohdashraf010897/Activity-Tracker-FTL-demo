{"version":3,"sources":["logo.svg","data/data.js","components/Timeliner.jsx","components/modal.jsx","components/userList.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","sampleData","ok","members","id","real_name","tz","activity_periods","start_time","end_time","Timeliner","groups","items","console","log","defaultTimeStart","moment","add","defaultTimeEnd","Modal","name","activityPeriods","setShowModal","title","map","item","idx","group","Date","getTime","tip","color","selectedBgColor","bgColor","className","onClick","UserListHeader","UserListItem","useState","showModal","UserList","userData","setUserData","useEffect","key","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e4553f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { getDefaultNormalizer } from \"@testing-library/react\";\n\nconst sampleData = {\n  ok: true,\n  members: [\n    {\n      id: \"W012A3CDE\",\n      real_name: \"Egon Spengler\",\n      tz: \"America/Los_Angeles\",\n      activity_periods: [\n        {\n          start_time: \"Jul 21 2020  1:33 PM\",\n          end_time: \"Jul 23 2020 1:54 PM\",\n        },\n        {\n          start_time: \"Aug 1 2020  11:11 AM\",\n          end_time: \"Aug 3 2020 2:00 PM\",\n        },\n        {\n          start_time: \"Aug 14 2020  5:33 PM\",\n          end_time: \"Aug 14 2020 8:02 PM\",\n        },\n      ],\n    },\n    {\n      id: \"W07QCRPA4\",\n      real_name: \"Glinda Southgood\",\n      tz: \"Asia/Kolkata\",\n      activity_periods: [\n        {\n          start_time: \"Aug 1 2020  1:33 AM\",\n          end_time: \"Aug 1 2020 1:54 PM\",\n        },\n        {\n          start_time: \"Jul 1 2020  11:11 AM\",\n          end_time: \"Jul 1 2020 2:00 PM\",\n        },\n        {\n          start_time: \"Aug 16 2020  5:33 PM\",\n          end_time: \"Sep 16 2020 8:02 PM\",\n        },\n      ],\n    },\n    {\n      id: \"W07QhfjPA4\",\n      real_name: \"John Doe\",\n      tz: \"Asia/Kolkata\",\n      activity_periods: [\n        {\n          start_time: \"Aug 1 2020  11:33 AM\",\n          end_time: \"Aug 3 2020 10:54 PM\",\n        },\n        {\n          start_time: \"Jul 1 2020  9:11 AM\",\n          end_time: \"Jul 10 2020 2:30 PM\",\n        },\n        {\n          start_time: \"Aug 16 2020  5:33 PM\",\n          end_time: \"Aug 18 2020 8:02 PM\",\n        },\n      ],\n    },\n    {\n      id: \"W0325QhfjPA4\",\n      real_name: \"Harry Potter\",\n      tz: \"Asia/Kolkata\",\n      activity_periods: [\n        {\n          start_time: \"Aug 1 2020  8:33 AM\",\n          end_time: \"Aug 3 2020 10:54 PM\",\n        },\n        {\n          start_time: \"Jul 2 2020  9:11 AM\",\n          end_time: \"Jul 10 2020 2:30 PM\",\n        },\n        {\n          start_time: \"Aug 6 2020  5:33 PM\",\n          end_time: \"Aug 18 2020 8:02 PM\",\n        },\n      ],\n    },\n  ],\n};\n\nexport const getData = () => {\n  return sampleData;\n};\n","import Timeline from \"react-calendar-timeline\";\r\nimport \"react-calendar-timeline/lib/Timeline.css\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nconst Timeliner = ({ groups, items }) => {\r\n  return (\r\n    console.log(groups, items),\r\n    (\r\n      <Timeline\r\n        groups={groups}\r\n        items={items}\r\n        defaultTimeStart={moment().add(-20, \"day\")}\r\n        defaultTimeEnd={moment().add(20, \"day\")}\r\n      />\r\n    )\r\n  );\r\n};\r\n\r\nexport default Timeliner;\r\n","import React from \"react\";\r\nimport Timeliner from \"./Timeliner\";\r\nimport \"./../styles/modal.scss\";\r\n\r\nconst Modal = ({ id, name, activityPeriods, setShowModal }) => {\r\n  const groups = [{ id: 1, title: `${name}` }];\r\n\r\n  const items = activityPeriods.map((item, idx) => {\r\n    return {\r\n      id: idx,\r\n      title: `Active Slot ${idx + 1}`,\r\n      group: 1,\r\n      start_time: new Date(item.start_time).getTime(),\r\n      end_time: new Date(item.end_time).getTime(),\r\n      tip: \"additional information\",\r\n      color: \"rgb(158, 14, 206)\",\r\n      selectedBgColor: \"rgba(225, 166, 244, 1)\",\r\n      bgColor: \"rgba(225, 166, 244, 0.6)\",\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"backdrop\">\r\n      <div className=\"modal\">\r\n        <div className=\"close-btn\" onClick={() => setShowModal(false)}>\r\n          Close Modal\r\n        </div>\r\n        <Timeliner groups={groups} items={items} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getData } from \"./../data/data\";\r\nimport Modal from \"./modal\";\r\n\r\nconst UserListHeader = () => {\r\n  return (\r\n    <div className=\"list-header\">\r\n      <span>User Id</span>\r\n      <span>Name</span>\r\n      <span>Time Zone</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserListItem = ({ id, name, tz, activityPeriods }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  return (\r\n    <>\r\n      {showModal && (\r\n        <Modal\r\n          setShowModal={setShowModal}\r\n          id={id}\r\n          name={name}\r\n          activityPeriods={activityPeriods}\r\n        />\r\n      )}\r\n      <div className=\"list-item\">\r\n        <span className=\"id\">{id}</span>\r\n        <span className=\"name\" onClick={() => setShowModal(true)}>\r\n          {name}\r\n        </span>\r\n        <span className=\"timezone\">{tz}</span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserList = () => {\r\n  const [userData, setUserData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const data = getData();\r\n    setUserData(data.members);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <UserListHeader />\r\n      {userData.map((item) => (\r\n        <UserListItem\r\n          key={item.id}\r\n          id={item.id}\r\n          name={item.real_name}\r\n          tz={item.tz}\r\n          activityPeriods={item.activity_periods}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport \"./../styles/home.scss\";\r\nimport { useState } from \"react\";\r\nimport UserList from \"./userList\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"user-list\">\r\n        <div className=\"user-list__header\">Users on board</div>\r\n\r\n        <div className=\"user-list__body\">\r\n          <UserList />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}